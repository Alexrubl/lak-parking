// src/index.ts
import { mergeProps } from "@zag-js/core";

// src/normalize-props.ts
import { createNormalizer } from "@zag-js/types";
function toCase(txt) {
  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
}
var propMap = {
  htmlFor: "for",
  className: "class",
  onDoubleClick: "onDblclick",
  onChange: "onInput",
  onFocus: "onFocusin",
  onBlur: "onFocusout",
  defaultValue: "value",
  defaultChecked: "checked"
};
function toVueProp(prop) {
  if (prop in propMap)
    return propMap[prop];
  if (prop.startsWith("on")) {
    return `on${toCase(prop.substr(2))}`;
  }
  return prop.toLowerCase();
}
var normalizeProps = createNormalizer((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "children") {
      if (typeof value === "string") {
        normalized["innerHTML"] = value;
      } else if (process.env.NODE_ENV !== "production" && value != null) {
        console.warn("[Vue Normalize Prop] : avoid passing non-primitive value as `children`");
      }
    } else {
      normalized[toVueProp(key)] = props[key];
    }
  }
  return normalized;
});

// src/use-actor.ts
import { onBeforeUnmount, onMounted, shallowRef } from "vue";
function useActor(service) {
  const state = shallowRef(service.state);
  onMounted(() => {
    const unsubscribe = service.subscribe((nextState) => {
      state.value = nextState;
    });
    onBeforeUnmount(() => {
      unsubscribe?.();
    });
  });
  return [state, service.send];
}

// src/use-machine.ts
import { onBeforeUnmount as onBeforeUnmount2, onMounted as onMounted2, shallowRef as shallowRef2, watch, watchEffect } from "vue";
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const _machine = typeof machine === "function" ? machine() : machine;
  const service = context ? _machine.withContext(context.value) : _machine;
  onMounted2(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    onBeforeUnmount2(() => {
      service.stop();
    });
  });
  watchEffect(() => {
    service.setOptions({ actions });
  });
  if (context) {
    watch(context, service.setContext, { deep: true });
  }
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = shallowRef2(service.state);
  onMounted2(() => {
    const unsubscribe = service.subscribe((nextState) => {
      state.value = nextState;
    });
    onBeforeUnmount2(() => {
      unsubscribe?.();
    });
  });
  return [state, service.send, service];
}

// src/use-snapshot.ts
import { snapshot, subscribe } from "@zag-js/store";
import { onUnmounted, ref } from "vue";
var useSnapshot = (object) => {
  const state = ref({});
  const unsubscribe = subscribe(object, () => {
    state.value = snapshot(object);
  });
  onUnmounted(() => {
    unsubscribe?.();
  });
  return state;
};
export {
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService,
  useSnapshot
};
//# sourceMappingURL=index.mjs.map