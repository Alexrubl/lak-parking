'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const isObject$1 = require('./isObject.cjs');
const _isPrototype = require('./_isPrototype.cjs');
const _nativeKeysIn = require('./_nativeKeysIn.cjs');

var isObject = isObject$1.isObject_1,
    isPrototype = _isPrototype._isPrototype,
    nativeKeysIn = _nativeKeysIn._nativeKeysIn;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn;

exports._baseKeysIn = _baseKeysIn;
