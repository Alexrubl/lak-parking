'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const vue = require('vue');
const useInputStyles = require('./useInputStyles.cjs');
const omit = require('../../node_modules/lodash/omit.cjs');
const Icon_vue_vue_type_script_setup_true_lang = require('../Icon/Icon.vue.cjs');
const InputStartAddon = require('./InputStartAddon.cjs');

const _hoisted_1 = { key: 0 };
const _hoisted_2 = { key: 1 };
const _hoisted_3 = ["value"];
const _hoisted_4 = { key: 2 };
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __name: "Input",
  props: {
    modelValue: {},
    hasError: { type: Boolean },
    rounded: { type: Boolean, default: false },
    size: { default: "large" },
    icon: {},
    variant: { default: "default" }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const attrs = vue.useAttrs();
    const { common, error, rounded, sizes, variants } = useInputStyles.useInputStyles();
    const finalAttrs = vue.computed(() => {
      return omit.default(attrs, ["class"]);
    });
    const wrapperClasses = vue.computed(() => {
      return [
        common.wrapper,
        variants[props.variant].wrapper,
        props.rounded ? rounded.full : props.variant == "none" ? "" : rounded.default,
        props.size && sizes[props.size].wrapper,
        props.hasError && error.wrapper
      ];
    });
    const inputClasses = vue.computed(() => {
      return [
        common.input,
        variants[props.variant].input,
        props.size && sizes[props.size].input,
        props.hasError && error.input
      ];
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div", {
        class: vue.normalizeClass(wrapperClasses.value)
      }, [
        _ctx.$slots.leading ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1, [
          vue.renderSlot(_ctx.$slots, "leading")
        ])) : vue.createCommentVNode("", true),
        _ctx.icon ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2, [
          vue.createVNode(vue.unref(InputStartAddon.default), { class: "-ml-[4px] !text-gray-400" }, {
            default: vue.withCtx(() => [
              vue.createVNode(Icon_vue_vue_type_script_setup_true_lang.default, { name: _ctx.icon }, null, 8, ["name"])
            ]),
            _: 1
          })
        ])) : vue.createCommentVNode("", true),
        vue.createElementVNode("input", vue.mergeProps({
          onInput: _cache[0] || (_cache[0] = ($event) => emit("update:modelValue", $event.target.value)),
          value: _ctx.modelValue,
          type: "text",
          class: inputClasses.value
        }, finalAttrs.value), null, 16, _hoisted_3),
        _ctx.$slots.trailing ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_4, [
          vue.renderSlot(_ctx.$slots, "trailing")
        ])) : vue.createCommentVNode("", true)
      ], 2);
    };
  }
});

exports.default = _sfc_main;
