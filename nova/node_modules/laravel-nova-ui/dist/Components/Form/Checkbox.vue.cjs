'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const vue = require('vue');

const _hoisted_1 = /* @__PURE__ */ vue.createElementVNode("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  class: "h-3 w-3",
  viewBox: "0 0 12 12"
}, [
  /* @__PURE__ */ vue.createElementVNode("g", {
    fill: "currentColor",
    "fill-rule": "nonzero"
  }, [
    /* @__PURE__ */ vue.createElementVNode("path", {
      class: "group-data-[state=checked]:opacity-0 group-data-[state=indeterminate]:opacity-100 group-data-[state=unchecked]:opacity-0",
      d: "M9.999 6a1 1 0 0 1-.883.993L8.999 7h-6a1 1 0 0 1-.117-1.993L2.999 5h6a1 1 0 0 1 1 1Z"
    }),
    /* @__PURE__ */ vue.createElementVNode("path", {
      class: "group-data-[state=checked]:opacity-100 group-data-[state=indeterminate]:opacity-0 group-data-[state=unchecked]:opacity-0",
      d: "M3.708 5.293a1 1 0 1 0-1.415 1.416l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.416L5.001 6.587 3.708 5.293Z"
    })
  ])
], -1);
const _hoisted_2 = [
  _hoisted_1
];
const _hoisted_3 = { key: 0 };
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __name: "Checkbox",
  props: {
    modelValue: { type: Boolean, default: false },
    indeterminate: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    label: {}
  },
  emits: ["update:modelValue", "change"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const focused = vue.ref(false);
    const theCheckbox = vue.ref(null);
    const checkedState = vue.computed(() => {
      return props.indeterminate ? "indeterminate" : props.modelValue ? "checked" : "unchecked";
    });
    const handleChange = (event) => {
      if (props.disabled)
        return;
      emit("change", !props.modelValue);
      emit("update:modelValue", !props.modelValue);
    };
    const labelProps = vue.computed(() => {
      const { label, disabled } = props;
      return {
        "aria-label": label,
        "aria-disabled": disabled,
        "data-focus": !props.disabled && focused.value,
        "data-state": checkedState.value,
        ":aria-checked": props.indeterminate ? "mixed" : props.modelValue,
        checkedValue: props.modelValue,
        checkedState: checkedState.value
      };
    });
    const labelComponent = vue.computed(() => {
      return "div";
    });
    const focus = () => {
      focused.value = true;
      theCheckbox.value?.focus();
    };
    __expose({ focus });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(labelComponent.value), vue.mergeProps({
        onClick: handleChange,
        onKeydown: vue.withKeys(vue.withModifiers(handleChange, ["prevent"]), ["space"]),
        onFocus: _cache[0] || (_cache[0] = ($event) => focused.value = true),
        onBlur: _cache[1] || (_cache[1] = ($event) => focused.value = false),
        tabindex: props.disabled ? "-1" : 0,
        class: "group inline-flex shrink-0 items-center gap-2 focus:outline-none",
        role: "checkbox"
      }, labelProps.value, {
        ref_key: "theCheckbox",
        ref: theCheckbox
      }), {
        default: vue.withCtx(() => [
          vue.createElementVNode("span", {
            class: vue.normalizeClass(["relative inline-flex h-4 w-4 items-center justify-center rounded border border-gray-950/20 bg-white text-white ring-offset-2 group-data-[state=checked]:border-primary-500 group-data-[state=indeterminate]:border-primary-500 group-data-[state=checked]:bg-primary-500 group-data-[state=indeterminate]:bg-primary-500 group-data-[focus=true]:ring-2 group-data-[focus=true]:ring-primary-500 dark:border-gray-600 dark:bg-gray-900 group-data-[focus]:dark:ring-offset-gray-950", {
              "bg-gray-200 opacity-50 dark:!border-gray-500 dark:!bg-gray-600": _ctx.disabled
            }])
          }, _hoisted_2, 2),
          _ctx.label || _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_3, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ])) : vue.createCommentVNode("", true)
        ]),
        _: 3
      }, 16, ["onKeydown", "tabindex"]);
    };
  }
});

exports.default = _sfc_main;
