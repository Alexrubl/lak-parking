'use strict';

Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: 'Module' } });

const vue = require('vue');
const Icon_vue_vue_type_script_setup_true_lang = require('../Icon/Icon.vue.cjs');
const Loader_vue_vue_type_script_setup_true_lang = require('../Loader/Loader.vue.cjs');
const useButtonStyles = require('./useButtonStyles.cjs');

const _hoisted_1 = { key: 0 };
const _hoisted_2 = { key: 1 };
const _hoisted_3 = { key: 2 };
const _hoisted_4 = {
  key: 0,
  class: "absolute",
  style: { "top": "50%", "left": "50%", "transform": "translate(-50%, -50%)" }
};
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __name: "Button",
  props: {
    as: { default: "button" },
    size: { default: "large" },
    label: {},
    variant: { default: "solid" },
    state: { default: "default" },
    padding: { default: "default" },
    loading: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    icon: {},
    leadingIcon: {},
    trailingIcon: {}
  },
  setup(__props) {
    const { base, baseAs, variants, disabled, validateSize, validatePadding } = useButtonStyles.useButtonStyles();
    const props = __props;
    const buttonSize = vue.computed(() => props.size);
    const buttonPadding = vue.computed(() => props.padding);
    validateSize(props.variant, buttonSize.value);
    validatePadding(props.variant, buttonPadding.value);
    const shouldBeDisabled = vue.computed(() => props.disabled || props.loading);
    const classes = vue.computed(() => {
      return [
        base,
        props.as ? baseAs : "",
        props.disabled && !props.loading && disabled,
        variants[props.variant]?.class || "",
        variants[props.variant]?.sizes[buttonSize.value] || "",
        variants[props.variant]?.padding[props.padding][buttonSize.value] || "",
        variants[props.variant]?.states[props.state][buttonSize.value] || ""
      ];
    });
    const loaderSize = vue.computed(() => {
      return variants[props.variant]?.loaderSize[buttonSize.value];
    });
    const iconType = vue.computed(() => {
      if (buttonSize.value === "large") {
        return "outline";
      }
      if (buttonSize.value === "small") {
        return "micro";
      }
      return "mini";
    });
    const trailingIconType = vue.computed(() => "mini");
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.as), {
        type: _ctx.as === "button" ? "button" : null,
        class: vue.normalizeClass(classes.value),
        disabled: shouldBeDisabled.value
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("span", {
            class: vue.normalizeClass(["flex items-center gap-1", {
              invisible: _ctx.loading
            }])
          }, [
            _ctx.leadingIcon ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1, [
              vue.createVNode(Icon_vue_vue_type_script_setup_true_lang.default, {
                name: _ctx.leadingIcon,
                type: trailingIconType.value
              }, null, 8, ["name", "type"])
            ])) : vue.createCommentVNode("", true),
            _ctx.icon ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2, [
              vue.createVNode(Icon_vue_vue_type_script_setup_true_lang.default, {
                name: _ctx.icon,
                type: iconType.value
              }, null, 8, ["name", "type"])
            ])) : vue.createCommentVNode("", true),
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ]),
            _ctx.trailingIcon ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_3, [
              vue.createVNode(Icon_vue_vue_type_script_setup_true_lang.default, {
                name: _ctx.trailingIcon,
                type: trailingIconType.value
              }, null, 8, ["name", "type"])
            ])) : vue.createCommentVNode("", true)
          ], 2),
          _ctx.loading ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_4, [
            vue.createVNode(Loader_vue_vue_type_script_setup_true_lang.default, { width: loaderSize.value }, null, 8, ["width"])
          ])) : vue.createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["type", "class", "disabled"]);
    };
  }
});

exports.default = _sfc_main;
