import { DefineComponent, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue';
import type { ButtonSize, ButtonVariant, IconName } from '../../types';
type ButtonState = 'default' | 'danger';
type ButtonProps = {
    as?: 'button' | 'div' | 'span';
    size?: ButtonSize;
    label?: string;
    variant?: ButtonVariant;
    state?: ButtonState;
    padding?: string;
    loading?: boolean;
    disabled?: boolean;
    icon?: IconName;
    leadingIcon?: IconName;
    trailingIcon?: IconName;
};
declare const _default: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ButtonProps>, {
    as: string;
    size: string;
    variant: string;
    state: string;
    padding: string;
    loading: boolean;
    disabled: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ButtonProps>, {
    as: string;
    size: string;
    variant: string;
    state: string;
    padding: string;
    loading: boolean;
    disabled: boolean;
}>>>, {
    padding: string;
    disabled: boolean;
    as: "button" | "div" | "span";
    size: ButtonSize;
    variant: ButtonVariant;
    state: ButtonState;
    loading: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
